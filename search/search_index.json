{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"README","text":""},{"location":"#cs-gy-6823-network-security","title":"CS-GY 6823 - Network Security","text":"Course OutlineCourse Textbook <p>This course introduces the student to the fundamentals of creating a secure networking environment and will cover the topics of hacking, attack methodologies, firewalls, IDS, VPNs, cryptography and wireless networking.</p> <p>Internet Security: A Hands-on Approach. 3rd Edition by Wenliang Du ()</p> <p>Network Security Notes</p>"},{"location":"network_security/notes/","title":"Network Security Notes","text":""},{"location":"network_security/notes/#finding-ip-addresses","title":"Finding IP Addresses","text":"<p>Commands used to get the IP address of a NIC. </p> <pre><code>$ ip address\n\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host noprefixroute\n       valid_lft forever preferred_lft forever\n2: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 48:68:4a:9f:04:9d brd ff:ff:ff:ff:ff:ff\n    inet 192.168.10.104/24 brd 192.168.10.255 scope global dynamic noprefixroute wlan0\n       valid_lft 52893sec preferred_lft 52893sec\n    inet6 fe80::f75c:b3fa:2035:7ed2/64 scope link noprefixroute\n       valid_lft forever preferred_lft forever\n</code></pre> <p>The previous <code>ip address</code> command is extreamly verbose. The <code>-br</code> flag is used for brevity.  <pre><code>$ ip -br address\n\nlo               UNKNOWN        127.0.0.1/8 ::1/128\nwlan0            UP             192.168.10.104/24 fe80::f75c:b3fa:2035:7ed2/64\n</code></pre> Commands to get the IP address from a hostname. <pre><code>$ dig www.example.com\n...\n;; ANSWER SECTION:\nwww.example.com.    1054    IN  A   93.184.215.14\n</code></pre></p>"},{"location":"network_security/notes/#sending-packets","title":"Sending Packets","text":"<p>Netcat can be used as a simple UDP server.  <pre><code>$ nc -lnuv 9090 \n</code></pre> While the UDP server is listening on port 9090 we can send data via a simple UDP client. </p> simple-udp-client.py<pre><code>#!/bin/env python3 \nimport socket\n\ndata = b\"Hello, from a simple udp client.\\n\"\nudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # SOCK_DGRAM selects the UDP type\nudp.sendto(data, (\"127.0.0.1\", 9090)) # destination IP address and port\n</code></pre>"},{"location":"network_security/notes/#receiving-packets","title":"Receiving Packets","text":"<p>We can listen for data via a simple UDP server.  simple-udp-server.py<pre><code>#!/bin/env python3\nimport socket\n\nudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp.bind((\"0.0.0.0\", 9090)) # waiting for packets from all IP addresses on port 9090.\n\nwhile True:\n    data, (ip, port) = udp.recvfrom(1024)\n    print(\"From {}:{}: {}\".format(ip, port, str(data, 'utf-8')))\n    udp.sendto(b\"Hello from simple UDP server\\n\", (ip, port))\n</code></pre></p> <p>Netcat can be used as a simple UDP client. <pre><code>$ nc -u 127.0.0.1 9090\n</code></pre></p>"},{"location":"network_security/notes/#routing-commands","title":"Routing Commands","text":"<p>Command to look at the routing table <pre><code>$ ip route\n</code></pre></p> <p>Command to see which interface will send packets to a particulaar destination <pre><code>$ ip route get 8.8.8.8\n</code></pre></p>"},{"location":"network_security/notes/#packet-sending-tools","title":"Packet-Sending Tools","text":"<p>Netcat is a tool that can send UDP and TCP packets. </p> <pre><code>$ nc &lt;ip&gt; &lt;port&gt;     # send TCP packet\n$ nc -u &lt;ip&gt; &lt;port&gt;  # send UDP packet\n</code></pre> <p>Bash's pseudo device can send UDP and TCP packets. <pre><code>// sending data via TCP\n$ echo \"data\" &gt; /dev/tcp/&lt;ip&gt;/&lt;port&gt;\n\n// sending data via UDP\n$ echo \"data\" &gt; /dev/udp/&lt;ip&gt;/&lt;port&gt;\n</code></pre></p> <p>Telnet sends TCP packets. <pre><code>$ telnet &lt;ip&gt;\n</code></pre></p> <p>Ping sends ICMP packets. <pre><code>$ ping &lt;ip&gt;\n</code></pre></p>"},{"location":"network_security/notes/#view-open-ports","title":"View open ports","text":"<pre><code>$ netstat -tna \n</code></pre>"},{"location":"network_security/notes/#packet-construction","title":"Packet Construction","text":"Moeenrahi, CC BY-SA 4.0, via Wikimedia Commons"},{"location":"network_security/notes/#transport-layer","title":"Transport Layer","text":"<ul> <li>Payload -&gt; Transport Layer: </li> <li>transport-layer header added. </li> <li>UDP or TCP <p>Most Important Information: Source/Destination Port Numbers. </p> </li> </ul>"},{"location":"network_security/notes/#network-layer","title":"Network Layer","text":"<ul> <li>IP header is added.</li> <li>Routing happens here as well. <p>Most Important Information: Source/Destination IP Addresses.</p> </li> </ul>"},{"location":"network_security/notes/#data-link-layer","title":"Data-Link Layer","text":"<ul> <li>MAC-layer header is added. <p>Most Important Information: Source/Destination MAC Addresses. </p> </li> </ul>"},{"location":"network_security/notes/#packet-sniffing","title":"Packet Sniffing","text":"<p>Packet Sniffing</p> <p>Computer programs or hardware that can log traffic passing over a computer network. </p>"},{"location":"network_security/notes/#list-of-packet-sniffing-tools","title":"List of Packet Sniffing Tools","text":"<ul> <li>Wireshark</li> <li>tcpdump</li> <li>scapy</li> </ul>"},{"location":"network_security/notes/#tcpdump","title":"tcpdump","text":"<p>Command to sniff network traffic on a defined interface. <pre><code>$ tcpdump -n -i enp5s0\n</code></pre> Command to sniff TCP/443 traffic on a defined interface.  <pre><code>$ tcpdump -n -i enp5p0 -vvv \"tcp port 443\"\n</code></pre> Command to save captured packets to a pcap file.  <pre><code>$ tcpdump -n -i enp5s0 -w \"/tmp/packets.pcap\"\n</code></pre></p>"},{"location":"network_security/notes/#scapy","title":"scapy","text":"<p>We can sniff network traffic using python. simple-sniffer.py<pre><code>#!/bin/env python3\nfrom scapy.all import *\n\ndef print_pkt(pkt):\n    print(pkt.summary())\n\npkt = sniff(iface='enp5s0', filter='icmp', prn=print_pkt)\n</code></pre></p> List of useful Berkely Packet Filters Filter Type Description BPF Command TCP Packets Filter TCP packets <code>tcp</code> UDP Packets Filter UDP packets <code>udp</code> ICMP Packets Filter ICMP packets <code>icmp</code> Source IP Address Filter by source IP address <code>src host 192.168.1.1</code> Destination IP Address Filter by destination IP address <code>dst host 192.168.1.1</code> Both IP Addresses Filter by both source and destination IP addresses <code>host 192.168.1.1 and host 192.168.1.2</code> Specific Port Filter by specific port number <code>port 80</code> Source Port Filter by source port number <code>src port 80</code> Destination Port Filter by destination port number <code>dst port 80</code> TCP Port Range Filter TCP packets within a range of ports <code>tcp portrange 1000-2000</code> Ethernet Type Filter by Ethernet protocol type (e.g., IPv4) <code>ether proto 0x0800</code> Source MAC Address Filter by source MAC address <code>ether src 00:11:22:33:44:55</code> Destination MAC Address Filter by destination MAC address <code>ether dst 00:11:22:33:44:55</code> ARP Packets Filter Address Resolution Protocol (ARP) packets <code>arp</code> Broadcast Packets Filter broadcast packets <code>broadcast</code> Multicast Packets Filter multicast packets <code>multicast</code> Subnet Filter packets within a specific subnet <code>net 192.168.1.0/24</code> Packet Size Filter packets larger than a specific size <code>greater 1500</code> TCP SYN Packets Filter TCP packets with SYN flag <code>tcp[tcpflags] &amp; tcp-syn != 0</code> Combination Combine multiple filters with logical operators <code>tcp and src host 192.168.1.1 and port 80</code>"},{"location":"network_security/subnetting/","title":"Subnetting Cheatsheet","text":""},{"location":"network_security/subnetting/#reference-charts","title":"Reference Charts","text":""},{"location":"network_security/subnetting/#binary-reference","title":"Binary Reference","text":"2<sup>7</sup> 2<sup>6</sup> 2<sup>5</sup> 2<sup>4</sup> 2<sup>3</sup> 2<sup>2</sup> 2<sup>1</sup> 2<sup>0</sup> 128 64 32 16 8 4 2 1"},{"location":"network_security/subnetting/#reserved-addresses","title":"Reserved Addresses","text":""},{"location":"network_security/subnetting/#private-ip-addresses-rfc-1918","title":"Private IP Addresses (RFC 1918)","text":"Address Block Range 10.0.0.0/8 10.0.0.0 - 10.255.255.255 172.16.0.0/12 172.16.0.0 - 172.31.255.255 192.168.0.0/16 192.168.0.0 - 192.168.255.255"},{"location":"network_security/subnetting/#loopback-addresses-rfc-1122-section-3213","title":"Loopback Addresses (RFC 1122, Section 3.2.1.3)","text":"Address Block Range 127.0.0.0/8 127.0.0.0 - 127.255.255.255"},{"location":"network_security/subnetting/#multicast-addresses-rfc-3171","title":"Multicast Addresses (RFC 3171)","text":"Address Block Range 224.0.0.0/4 224.0.0.0 - 239.255.255.255"},{"location":"network_security/subnetting/#rfc-references","title":"RFC References","text":""},{"location":"network_security/subnetting/#ietf-datatracker-website","title":"IETF Datatracker Website","text":"<p>The IETF Datatracker is the day-to-day front-end to the IETF database for people who work on IETF standards.     It contains data about the documents, working groups, meetings, agendas, minutes, presentations, and more, of the IETF.  </p> <p>https://datatracker.ietf.org/</p>"},{"location":"network_security/subnetting/#useful-rfcs","title":"Useful RFCs","text":"RFC 917RFC 950RFC 1918RFC 6890 <p>Internet Subnets </p> <p>Jeffrey Mogul Computer Science Department Stanford University  </p> <p>October 1984  </p> <p>Link to RFC 917: IETF Datatracker</p> <p>Internet Standard Subnetting Procedure </p> <p>J. Mogul (Stanford) J. Postel (ISI)  </p> <p>August 1985  </p> <p>Link to RFC 950: IETF Datatracker</p> <p>Address Allocation for Private Internets </p> <p>Y. Rekhter (Cisco Systems) B. Moskowitz (Chrysler Corp.) D. Karrenberg (RIPE NCC) G. J. de Groot (RIPE NCC) E. Lear (Silicon Graphics, Inc.)  </p> <p>February 1996  </p> <p>Link to RFC 1918: IETF Datatracker</p> <p>Special-Purpose IP Address Registries </p> <p>M. Cotton L. Vegoda (ICANN) R. Bonica, ED. (Juniper Networks) B. Haberman (JHU)  </p> <p>April 2013  </p> <p>Link to RFC 6890: IETF Datatracker</p>"}]}